pipeline {
    agent any
    
    environment {
    DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    AWS_CREDENTIALS = credentials('awsbs') 
      }
    stages {
        stage('verification php  et php unit') {
            steps {
               sh'php --version'
                
            }
        }
         stage('verification Docker') {
            steps {
                sh """
                docker info
                docker version
                docker compose version
                curl --version
                """
            }
        }
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Gedein/gestion_envoi.git']])
            }
        }
        stage('prune le systeme') {
            steps {
               
               sh 'docker ps'
               
            }
        }
        stage('Login') {
            steps {
                 sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                }
        }
        stage('build and deploy'){
            steps{
                 
                  sh 'docker compose up -d'
                  sh 'docker ps'
                  sh 'docker images'
                  sh'docker image tag gestion_envoi gedeonsteve/gestionenvoi:gestionenvoi'
                  sh'docker image tag mysql:5.7 gedeonsteve/gestionenvoi:mysql5.7'
                  sh'docker image tag nginx:alpine gedeonsteve/gestionenvoi:alpinelatest'
                  sh 'docker images'
                  sh 'docker image push --all-tags gedeonsteve/gestionenvoi'
                  sh 'docker compose exec app ls -l'
                  sh 'docker compose exec app chmod -R 777 /var/www/storage'
                  sh 'docker compose exec app composer install'
                  sh 'docker compose exec app php artisan key:generate'
                  }
        }

        stage('deploy'){
            steps{
                  withAWS(credentials: 'awsbs') {
            // Transfert de Dockerrun.aws.json vers S3
                sh 'aws s3 create-bucket --bucket bucket-gestion-envoi-s3 --region ue-west-3'
                sh 'aws s3 cp Dockerrun.aws.json s3://bucket-gestion-envoi-s3/Dockerrun.aws.json'

            // Créez une nouvelle version de l'application Elastic Beanstalk
               sh 'aws elasticbeanstalk create-application-version --application-name GestionEnvoi --version-label v${BUILD_NUMBER} --source-bundle S3Bucket=bucket-gestion-envoi-s3,S3Key=Dockerrun.aws.json'

            // Mettez à jour l'environnement Elastic Beanstalk avec la nouvelle version
               sh 'aws elasticbeanstalk update-environment --application-name GestionEnvoi --environment-name NomDeLEnvironnement --version-label v${BUILD_NUMBER}'}
        
            }
    
}
    }
        }
    